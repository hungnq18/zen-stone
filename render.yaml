services:
  # Private Service for MS SQL Server
  - type: pserv
    name: db
    # Disks require a paid plan like 'standard'
    plan: standard
    env: docker
    dockerfilePath: ./db.Dockerfile
    dockerContext: .
    envVars:
      - key: ACCEPT_EULA
        value: "Y"
      - key: SA_PASSWORD
        sync: false # Set this manually in the Render dashboard for security
    disks:
      - name: mssql-data
        mountPath: /var/opt/mssql
        sizeGB: 10 # Adjust size as needed

  # Your Web Application Service
  - type: web
    name: swp-tech-webapp
    plan: starter # Or your desired plan
    env: docker
    dockerfilePath: ./Dockerfile
    dockerContext: .
    envVars:
      - key: DB_HOST
        fromService:
          type: pserv
          name: db
          property: host
      - key: DB_NAME
        value: swp_tech
      - key: DB_USER
        value: sa
      - key: DB_PASSWORD
        fromService:
          type: pserv
          name: db
          envVarKey: SA_PASSWORD
    autoDeploy: no # Recommend 'no' until initial setup is stable
    initialDeployHook: |
      echo "Starting database initialization..."
      # The base tomcat image is debian-based. We will install mssql-tools.
      apt-get update && apt-get install -y curl gnupg
      curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
      curl https://packages.microsoft.com/config/debian/11/prod.list > /etc/apt/sources.list.d/mssql-release.list
      apt-get update && ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
      echo "Waiting 45s for the database to be ready..."
      sleep 45
      echo "Running database setup script..."
      /opt/mssql-tools/bin/sqlcmd -S $DB_HOST -U $DB_USER -P $DB_PASSWORD -Q 'IF DB_ID(N''swp_tech'') IS NULL CREATE DATABASE [swp_tech];'
      /opt/mssql-tools/bin/sqlcmd -S $DB_HOST -U $DB_USER -P $DB_PASSWORD -d $DB_NAME -i ./db/db.sql
      echo "Database initialization finished." 